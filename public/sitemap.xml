<search>
    
     <entry>
        <title>Posts</title>
        <url>https://cenchaojun.github.io/cenchaojunblog/post/</url>
        <categories>
          
        </categories>
        <tags>
          
        </tags>
        <content type="html"> </content>
    </entry>
    
     <entry>
        <title>SIFT的学习</title>
        <url>https://cenchaojun.github.io/cenchaojunblog/post/SIFT%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
        <categories>
          <category>CV</category>
        </categories>
        <tags>
          <tag>学习</tag>
        </tags>
        <content type="html"> SIFT的学习 SIFT的学习
理论我就不多说了，我自己听了一下午，也没听懂，反正挺复杂的，我就是想试试效果。做个对比实验
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  import cv2import matplotlib.pyplot as plt# read images img1 = cv2.imread(&amp;#39;DJI_0023_34.jpg&amp;#39;)img2 = cv2.imread(&amp;#39;DJI_0025_37.jpg&amp;#39;)img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)#sift sift = cv2.xfeatures2d.SIFT_create()keypoints_1, descriptors_1 = sift.detectAndCompute(img1,None)keypoints_2, descriptors_2 = sift.detectAndCompute(img2,None)#feature matching bf = cv2.BFMatcher(cv2.NORM_L1, crossCheck=True)matches = bf.match(descriptors_1,descriptors_2)matches = sorted(matches, key = lambda x:x.distance)img3 = cv2.drawMatches(img1, keypoints_1, img2, keypoints_2, matches[:50], img2, flags=2)plt.imshow(img3),plt.show()  用了网上的代码，其中比较麻烦的是，不仅要安装opencv-python，还要安装opencv-contrib-python这个包，而且你安装的版本还不能太高，试了半天，最终把opencv-contrib-python降到3.3.0.10才可以的，最好是在一个新的项目中实现这个代码。
结果图：
但是吧，我也没看出来，能不能检测玉米雄穗，也不知道检测的好不好~但是我感觉吧，检测的很不好~
</content>
    </entry>
    
     <entry>
        <title>爬虫记录</title>
        <url>https://cenchaojun.github.io/cenchaojunblog/post/%E7%88%AC%E8%99%AB%E8%AE%B0%E5%BD%95/</url>
        <categories>
          <category>爬虫</category>
        </categories>
        <tags>
          <tag>学习</tag>
        </tags>
        <content type="html"> 爬虫代码编写 代码连接：爬虫代码   这次爬虫写了一个类进行爬虫的，不再像之前就只写函数，感觉好不错
  注意：
1.使用不同的headers
2.记得r.close()
3.不用连续的爬，对服务器造成压力。这样也可以减少自己的ip被封。之后也就不用花钱或者找代理了
4.要使用try语句，这样不会中断
  </content>
    </entry>
    
     <entry>
        <title>SSDS代码记录</title>
        <url>https://cenchaojun.github.io/cenchaojunblog/post/SSDS%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95/</url>
        <categories>
          <category>CV</category>
        </categories>
        <tags>
          <tag>学习</tag>
        </tags>
        <content type="html"> SSDS代码运行的记录 代码连接：SSDS 代码   运行环境需要自己设置一下自己的GPU，要不然容易报错CUDA
1  os.environ[&amp;#34;CUDA_VISIBLE_DEVICES&amp;#34;] = &amp;#34;0&amp;#34;      按照这个教程走就可以了，就没有什么大的问题 运行结果  虽然照着这个教程可以运行了，但是在换backbone的时候，发现自己找不到预训练的网络，而如果不用预训练的网络的时候，loss就容易出现nan值，根本没法训练，就算你调再小的学习率也还是不行的，想自己找原因，但是自己的实力那么菜~~哈哈，还好找到的这个大佬的邮箱，向他发了询问的邮件，大佬说可以代码有将yolov3的预训练，于是乎找了一下，果然在convert_darknet.py里面有的代码，而且也能看懂，但是我找了一下import model里面有yolo，我靠，这没看到呀，咋整~于是乎灵光一闪，想到可能在其他仓库里面，果不其然，在yolov3里面找到这个权重的转换，但是还不知道能不能实现出来~ 所有的仓库都需要执行sh ./make.sh 一下，要不然找不到相关的包。结果是可以运行的，也找到了mobilenetV2的预训练模型。 难点：现在mobilenetV3已经出来了，而且出来好久了，确实要实现这个代码了。加油~  </content>
    </entry>
    
</search>